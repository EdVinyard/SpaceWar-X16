INIT:
    SCREEN $80
    CLS
    RECT 0,0, 319,239, 0: REM CLEAR SCREEN WITH BLACK

    A0 = -2 * 3.14159 / 16 : REM SMALLEST ANGLE INCREMENT IN RADIANS

    REM SHIP VERTICES
    DATA 7, -3,3, -1,-4, 0,-4, 3,3, 0,2, -1,2, -3,3
    GOSUB MAKESPRITES

    E  =  0: REM ENTITY INDEX
    EC = 10: REM TOTAL ENTITY COUNT

    REM TURN OFF ALL SPRITES
    FOR I = 1 TO EC: SPRITE I,0: NEXT

    REM ENTITY PROPERTIES
    DIM  T(EC): REM TYPE EMPTY=0 SHIP=1 MISSILE=2
    DIM  R(EC): REM RADIUS OF ENTITY IN PIXELS
    DIM  X(EC): REM X-POSITION, CENTER OF ENTITY
    DIM  Y(EC): REM Y-POSITION, CENTER OF ENTITY
    DIM VX(EC): REM X-VELOCITY
    DIM VY(EC): REM Y-VELOCITY
    DIM  C(EC): REM COUNTDOWN TIMER, -1 PER MAINLOOP INTERATION
                REM SHIP    0 READY TO FIRE  >0 RELOADING
                REM MISSILE 0 FIZZLE OUT     >0 FLYING

    REM SHIP-ONLY PROPERTIES
    DIM  A( 2): REM ANGLE COUNTERCLOCKWISE (RADIANS = A*A0)
    DIM  J( 2): REM JOYSTICK STATE

    FOR E=1 TO 2: T(E)=1: A(E)=0: Y(E)=120: VX(E)=0: VY(E)=0: R(E)=4: C(E)=0: NEXT
    X(1) = 100
    X(2) = 220

    REM    IDX PRI PAL FLP XSZ YSZ DEPTH (8-BIT)
    SPRITE 1,  3,  8,  0,  0,  0,  1
    SPRITE 2,  3,  15, 0,  0,  0,  1

    PRINT "PRESS START/ENTER TO QUIT"
    F = 0
MAINLOOP:
    ZT = TIME

    REM READ JOYSTICK INPUT
    KB   = JOY(0): REM KEYBOARD
    J(1) = JOY(1)
    J(2) = JOY(2)

    REM USE KEYBOARD WHEN A JOYSTICK IS MISSING
    IF J(1) = -1 THEN J(1) = KB
    IF J(2) = -1 THEN J(2) = KB

    FOR E = 1 TO EC
        IF C(E) > 0 THEN C(E) = C(E) - 1
        ON T(E) GOSUB SHIP, MISSILE
        NEXT E
    
    F=1: G=2: GOSUB TESTCRASH
    IF NOT B THEN GOTO SHIPMISS
        E=1: GOSUB EXPLODE
        E=2: GOSUB EXPLODE
        END
        SHIPMISS:

    REM HOW MANY FRAMES DID IT TAKE FOR ONE ITERATION?
    LOCATE 2,1: PRINT "                ":LOCATE 2,1: PRINT STR$(TIME - ZT)

    GOTO MAINLOOP

SHIP:
    REM UPDATE SHIP E
    REM INPUT E SHIP INDEX (1-2)

    IF J(E) AND $010 THEN END                       : REM START BUTTON

    REM ROTATION
    IF J(E) AND $002 THEN A(E) = A(E) + 1           : REM D-PAD LEFT
    IF J(E) AND $001 THEN A(E) = A(E) - 1           : REM D-PAD RIGHT
    IF A(E) > 15 THEN A(E) = 0
    IF A(E) < 0 THEN A(E) = 15

    REM    IDX BNK ADR                  DEPTH (8-BIT)
    SPRMEM E,  1,  $100 * A(E) + $3000, 1

    REM THRUST
    IF NOT J(E) AND $008 THEN NOTHRUST              : REM D-PAD UP
        X=0: Y=-0.5: T=A(E)*A0: GOSUB ROTATE
        VX(E) = VX(E) + X
        VY(E) = VY(E) + Y
        NOTHRUST:

    GOSUB MOVE

    REM FIRE A MISSILE
    IF C(E) = 0 AND (J(E) AND $800) THEN GOSUB FIRE : REM A BUTTON

    RETURN

MISSILE: 
    REM UPDATE MISSILE E
    REM INPUT E MISSILE INDEX (3 <= E <= EC)

    IF C(E) > 0 THEN GOTO NOFIZZLE
        REM FIZZLE OUT
        T(E) = 0            : REM FREE ENTITY SLOT
        SPRITE E, 0         : REM TURN OFF SPRITE
        RETURN
        NOFIZZLE:

    F = E
    FOR G = 1 TO 2
        GOSUB TESTCRASH: REM INPUTS F, G
        IF B THEN E=G: GOSUB EXPLODE: END
        NEXT G

    GOSUB MOVE
    RETURN

MOVE:
    REM UPDATE ENTITY POSITION AND SPRITE BASED ON VELOCITY
    REM INPUT E ENTITY INDEX

    X(E) = X(E) + VX(E)
    IF X(E) > 315 THEN X(E) = 0
    IF X(E) < 0 THEN X(E) = 315

    Y(E) = Y(E) + VY(E)
    IF Y(E) > 235 THEN Y(E) = 0
    IF Y(E) < 0 THEN Y(E) = 235

    REM    IDX  X          Y
    MOVSPR E,   X(E)-R(E), Y(E)-R(E)

    RETURN

TESTCRASH:
    REM ARE ENTITY F AND ENTITY G COLLIDING?
    REM INPUT  F ENTITY INDEX
    REM INPUT  G ENTITY INDEX
    REM OUTPUT B 0=FALSE, OTHERWISE TRUE

    ZX = X(F) - X(G): REM X-DISTANCE
    ZY = Y(F) - Y(G): REM Y-DISTANCE
    ZH = R(F) + R(G): REM MAXIMUM COLLISION DISTANCE
    B = ZX*ZX + ZY*ZY <= ZH*ZH
    RETURN

EXPLODE:
    RECT X(E)-R(E),Y(E)-R(E), X(E)+R(E),Y(E)+R(E), 4
    RETURN

FIRE:
    REM ONE SHIP FIRES A MISSILE
    REM INPUT E ENTITY INDEX OF SHIP THAT FIRES
    C(E) = 40: REM COOLDOWN UNTIL NEXT MISSILE LAUNCH

    REM FIND AN UNUSED ENTITY INDEX
    REM M - ENTITY INDEX
    FOR M = 3 TO EC+1
        IF M = EC+1 THEN RETURN
        IF T(M) = 0 THEN LAUNCH
        NEXT M

    LAUNCH:
    X=0: Y=-1: T=A(E)*A0: GOSUB ROTATE
    VX(M) = 2 * X + VX(E)
    VY(M) = 2 * Y + VY(E)
    REM KLUDGE: GIVE THE MISSILE A LITTLE EXTRA BOOST TO START SO IT DOES NOT
    REM COLLIDE WITH THE SHIP THAT JUST LAUNCHED IT
    X(M)  = 10 * X + X(E): REM MAGIC NUMBER INSTEAD OF R(E)
    Y(M)  = 10 * Y + Y(E)
    T(M)  = 2
    R(M)  = 1
    C(M)  = 120: REM FIZZLE OUT AFTER THIS TIME

    REM    IDX PRI PAL FLP XSZ YSZ DEPTH (8-BIT)
    SPRITE M,  3,  0,  0,  0,  0,  1

    REM    IDX BNK ADR    DEPTH (8-BIT)
    SPRMEM M,  1,  $4000, 1

    REM    IDX X     Y
    MOVSPR M,  X(M), Y(M)

    RETURN

MAKESPRITES:
    REM SHIP SPRITE
    X0 = 100
    Y0 = 120
    FOR I = 0 TO 15
        REM RENDER THE FIRST EDGE
        READ N, X1,Y1
        X=X1: Y=Y1: T=I*A0: GOSUB ROTATE: X1=X: Y1=Y

        REM RENDER THE REST OF THE EDGES
        FOR J = 2 TO N
            READ X2,Y2
            X=X2: Y=Y2: T=I*A0: GOSUB ROTATE: X2=X: Y2=Y
            LINE X0+X1,Y0+Y1, X0+X2,Y0+Y2, 1
            X1=X2: Y1=Y2
            NEXT J

        REM COPY DRAWING INTO SPRITE VRAM
        SA = $3000 + (256*I): REM SPRITE ADDRESS
        SX=X0-4: SY=Y0-4: SC=8: SR=8: DA=SA: GOSUB SPRITECOPY
        
        REM CLEAR AREA OF DRAWING FOR NEXT FRAME
        RECT X0-5,Y0-5, X0+4,Y0+4, 0

        RESTORE
        NEXT I

    REM MISSILE SPRITE    
    FOR I = 0 TO 255
        VPOKE 1, $4000+I, 0
        NEXT I
    VPOKE 1, $4001, 12
    VPOKE 1, $4008, 12
    VPOKE 1, $4009, 1
    VPOKE 1, $400A, 12
    VPOKE 1, $4011, 12

    RETURN

ROTATE:
    REM ROTATE AN X,Y COORDINATE AROUND THE ORIGIN (0,0)
    REM INOUT X X-COORDINATE
    REM INOUT Y Y-COORDINATE 
    REM INPUT T COUNTERCLOCKWISE ROTATION IN RADIANS

    ZX = X
    ZY = Y
    X = ZX * COS(T) - ZY * SIN(T)
    Y = ZX * SIN(T) + ZY * COS(T)
    RETURN

SPRITECOPY:
    REM COPY 8-BIT VALUES FROM VRAM INTO SPRITE VRAM
    REM WARNING: ONLY WORKS UP TO $FFFF!
    REM INPUT SX START X-COORDINATE (0-319)
    REM INPUT SY START Y-COORDINATE (0-239)
    REM INPUT SR SOURCE ROWS (8,16,32,64)
    REM INPUT SC SOURCE COLUMNS (8,16,32,64)
    REM INPUT DA DESTINATION ADDRESS (>=$3000)

    ZI = 0
    FOR ZY = SY TO SY+SR-1     : REM ROWS
        FOR ZX = SX TO SX+SC-1 : REM COLUMNS
            P = VPEEK(0, 320*ZY + ZX)
            REM PRINT P;
            VPOKE 1, DA + ZI, P
            ZI = ZI + 1
            NEXT
        REM PRINT
        NEXT

    RETURN
