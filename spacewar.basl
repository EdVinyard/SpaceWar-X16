INIT:
    SCREEN $80
    CLS
    PRINT "HELLO, SPACEWAR!"
    RECT 0,0, 319,239, 0

    T0 = -2 * 3.14159 / 16 : REM ROTATION INCREMENT IN RADIANS

    REM SHIP VERTICES
    DATA 7, -3,3, -1,-4, 0,-4, 3,3, 0,2, -1,2, -3,3
    GOSUB MAKESPRITES

    E  =  0: REM ENTITY INDEX
    EC = 10: REM TOTAL ENTITY COUNT

    REM ENTITY PROPERTIES
    DIM  T(EC): REM TYPE EMPTY=0 PLAYER=1 MISSILE=2
    DIM  S(EC): REM SPRITE INDEX
    DIM  R(EC): REM ROTATION COUNTERCLOCKWISE / (PI/16)
    DIM  X(EC): REM X-POSITION CENTER OF SHIP
    DIM  Y(EC): REM Y-POSITION CENTER OF SHIP
    DIM VX(EC): REM X-VELOCITY
    DIM VY(EC): REM Y-VELOCITY
    DIM  J(EC): REM JOYSTICK STATE
    DIM  C(EC): REM COOLDOWN, MISSILE (0 READY, >0 COOLING)

    T(1)=1: R(1)=0: X(1)=X0-4:   Y(1)=Y0: VX(1)=0: VY(1)=0: S(1)=1: C(1)=0
    T(2)=1: R(2)=0: X(2)=X0+100: Y(2)=Y0: VX(2)=0: VY(2)=0: S(2)=2: C(2)=0

    REM    IDX PRI PAL FLP XSZ YSZ DEPTH (8-BIT)
    SPRITE 1,  3,  8,  0,  0,  0,  1
    SPRITE 2,  3,  15, 0,  0,  0,  1

    PRINT "PRESS START/ENTER TO QUIT"
MAINLOOP:
    REM READ JOYSTICK INPUT
    KB   = JOY(0): REM KEYBOARD
    J(1) = JOY(1)
    REM J(2) = JOY(2)

    REM USE KEYBOARD WHEN A JOYSTICK IS MISSING
    IF J(1) = -1 THEN J(1) = KB
    REM IF J(2) = -1 THEN J(2) = KB

    E=1: GOSUB UPDATESHIP
    E=2: GOSUB UPDATESHIP
    GOSUB SHIPCRASH

    SLEEP 0
    GOTO MAINLOOP

QUIT:
    END

UPDATESHIP:
    IF J(E) AND $010 THEN QUIT

    REM ROTATION
    IF J(E) AND $002 THEN R(E) = R(E) + 1       : REM D-PAD LEFT
    IF J(E) AND $001 THEN R(E) = R(E) - 1       : REM D-PAD RIGHT
    IF R(E) > 15 THEN R(E) = 0
    IF R(E) < 0 THEN R(E) = 15

    REM    IDX    BNK ADR                  DEPTH (8-BIT)
    SPRMEM S(E),  1,  $100 * R(E) + $3000, 1

    REM THRUST
    IF NOT J(E) AND $008 THEN NOTHRUST          : REM D-PAD UP
        RT = R(E) + 8: REM ROTATION OF THRUST; OPPOSITE SHIP HEADING
        IF RT > 15 THEN RT = RT - 16: REM NORMALIZE THRUST ROTATION
        X=0: Y=-0.5: T=R(E)*T0: GOSUB ROTATE
        VX(E) = VX(E) + X
        VY(E) = VY(E) + Y
        REM LOCATE 1+E*2,1
        REM PRINT X; Y
        REM PRINT VX(E); VY(E)
        NOTHRUST:

    GOSUB MOVE

    REM MISSILE
    IF C(E) > 0 THEN C(E) = C(E) - 1
    IF C(E) = 0 AND (J(E) AND $800) THEN GOSUB FIREMISSILE

    RETURN

MOVE:
    REM UPDATE ENTITY POSITION AND SPRITE BASED ON VELOCITY
    X(E) = X(E) + VX(E)
    IF X(E) > 315 THEN X(E) = 0
    IF X(E) < 0 THEN X(E) = 315

    Y(E) = Y(E) + VY(E)
    IF Y(E) > 235 THEN Y(E) = 0
    IF Y(E) < 0 THEN Y(E) = 235

    REM    IDX   X       Y
    MOVSPR S(E), X(E)-4, Y(E)-4

    RETURN

SHIPCRASH:
    ZX = X(1) - X(2)
    IF ZX > 8 THEN RETURN
    ZY = Y(1) - Y(2)
    IF ZY > 8 THEN RETURN
    IF ZX*ZX + ZY*ZY > 60 THEN RETURN
    E=1: GOSUB EXPLODE
    E=2: GOSUB EXPLODE
    GOTO QUIT

EXPLODE:
    RECT X(E)-5,Y(E)-5, X(E)+5,Y(E)+5, 4
    RETURN

FIREMISSILE:
    REM ONE SHIP FIRES A MISSILE
    REM INPUT E ENTITY INDEX OF SHIP THAT FIRES
    C(E) = 120: REM COOLDOWN UNTIL NEXT MISSILE LAUNCH

    REM FIND AN UNUSED ENTITY INDEX
    REM M - ENTITY INDEX
    FOR M = 3 TO EC+1
        IF M = EC+1 THEN RETURN
        IF T(M) = 0 THEN FIRE
        NEXT M

    FIRE:
    PRINT "MISSILE IS ENTITY ";M
    X=0: Y=-1: T=R(E)*T0: GOSUB ROTATE
    VX(M) = 2 * X
    VY(M) = 2 * Y
    X(M)  = 5 * X + X(E)
    Y(M)  = 5 * Y + Y(E)
    T(M)  = 2
    S(M)  = M

    REM    IDX PRI PAL FLP XSZ YSZ DEPTH (8-BIT)
    SPRITE M,  3,  0,  0,  0,  0,  1

    REM    IDX BNK ADR    DEPTH (8-BIT)
    SPRMEM M,  1,  $4000, 1

    REM    IDX X     Y
    MOVSPR M,  X(M), Y(M)

    RETURN

MAKESPRITES:
    REM SHIP SPRITE
    X0 = 100
    Y0 = 120
    FOR I = 0 TO 15
        REM RENDER THE FIRST EDGE
        READ N, X1,Y1
        X=X1: Y=Y1: T=I*T0: GOSUB ROTATE: X1=X: Y1=Y

        REM RENDER THE REST OF THE EDGES
        FOR J = 2 TO N
            READ X2,Y2
            X=X2: Y=Y2: T=I*T0: GOSUB ROTATE: X2=X: Y2=Y
            LINE X0+X1,Y0+Y1, X0+X2,Y0+Y2, 1
            X1=X2: Y1=Y2
            NEXT J

        REM COPY DRAWING INTO SPRITE VRAM
        SA = $3000 + (256*I): REM SPRITE ADDRESS
        SX=X0-4: SY=Y0-4: SC=8: SR=8: DA=SA: GOSUB SPRITECOPY
        
        REM CLEAR AREA OF DRAWING FOR NEXT FRAME
        RECT X0-5,Y0-5, X0+4,Y0+4, 0

        RESTORE
        NEXT I

    REM MISSILE SPRITE    
    FOR I = 0 TO 255
        VPOKE 1, $4000+I, 0
        NEXT I
    VPOKE 1, $4000, 1

    RETURN

ROTATE:
    REM ROTATE AN X,Y COORDINATE AROUND THE ORIGIN (0,0)
    REM INOUT X X-COORDINATE
    REM INOUT Y Y-COORDINATE 
    REM INPUT T COUNTERCLOCKWISE ROTATION IN RADIANS

    ZX = X
    ZY = Y
    X = ZX * COS(T) - ZY * SIN(T)
    Y = ZX * SIN(T) + ZY * COS(T)
    RETURN

SPRITECOPY:
    REM COPY 8-BIT VALUES FROM VRAM INTO SPRITE VRAM
    REM WARNING: ONLY WORKS UP TO $FFFF!
    REM INPUT SX START X-COORDINATE (0-319)
    REM INPUT SY START Y-COORDINATE (0-239)
    REM INPUT SR SOURCE ROWS (8,16,32,64)
    REM INPUT SC SOURCE COLUMNS (8,16,32,64)
    REM INPUT DA DESTINATION ADDRESS (>=$3000)

    ZI = 0
    FOR ZY = SY TO SY+SR-1     : REM ROWS
        FOR ZX = SX TO SX+SC-1 : REM COLUMNS
            P = VPEEK(0, 320*ZY + ZX)
            REM PRINT P;
            VPOKE 1, DA + ZI, P
            ZI = ZI + 1
            NEXT
        REM PRINT
        NEXT

    RETURN